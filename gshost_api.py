"""GSHost Web Api Wrapper

Allows remote secure management of a gshost.us server from python

All methods are blocking on a HTTP call to the API, please don't try to use them in realtime loops :)
"""

import requests

#server management class
class server:

	def __init__(self, node, id_num, auth):
		"""Initialise the server

		Arguments:
		node -- the hostname of the node that the server is run from
		id_num -- the id number of the server
		auth -- the authentication information for the api, a tuple of your gshost login and password
		"""
		self.node = node
		self.id = id_num
		self.auth = auth
		self.name = "{} server {}".format(self.node, self.id)
		self.url_base = 'https://{0}/api/v0/server/{1}/'.format(self.node, self.id)

	def start(self):
		"""Start the server, if it's currently down"""
		r = requests.post(self.url_base + 'start', auth=self.auth)
		r.raise_for_status()

	def stop(self):
		"""Stop the server, if it's currently up"""
		r = requests.post(self.url_base + 'stop', auth=self.auth)
		r.raise_for_status()

	def restart(self):
		"""Force the server to restart"""
		self.stop_server()
		self.start_server()

	def status(self):
		"""Get the server status, as a dictionary"""
		r = requests.get(self.url_base + 'status', auth=self.auth)
		r.raise_for_status()
		return r.json()

	def running(self):
		"""Check if the server is running"""
		return self.status()['running']

	def write_file(self, filename, file_contents):
		"""Write a file to the server"""
		r = requests.put(self.url_base + 'file?path=' + filename, auth=self.auth, data=file_contents)
		r.raise_for_status()

	def write_config_from_dict(self, filename, cfg_dict):
		"""Write out a config file from a dictionary of key -> value (ends up as key = value)

		Values will be coerced to strings.

		Careful: the semantics of this can be a little strange; if you embed newlines in your values
		you can end up with extra keys, and comments will also be entered verbatim.

		You may need to add quotes in some cases.

		The file ends up with \n newlines.
		"""
		lines = ["#(autogenerated config)"]
		for key, value in cfg_dict.iteritems():
			line = str(key)
			if value != '':
				line += ' = '+ str(value)
			lines.append(line)

		file_contents = '\n'.join(lines)
		self.write_file(filename, file_contents)
